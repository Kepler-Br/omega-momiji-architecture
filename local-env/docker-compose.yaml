name: omega-momiji

services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      start_period: 15s
      interval: 10s
      timeout: 3s
      retries: 12

  # Upload with us-east-1 region or it will throw an exception
  minio:
    image: hub.docker.dw/bitnami/minio:2025.4.22
    ports:
      - "8000:9000"
      - "8001:9001"
    expose:
      - 9000
    environment:
      - MINIO_ROOT_USER=accessKey1
      - MINIO_ROOT_PASSWORD=verySecretKey1
      - MINIO_DEFAULT_BUCKETS=sticker,audio,voice,photo,video,animation,video-note

  zookeeper:
    image: hub.docker.dw/confluentinc/cp-zookeeper:7.9.1
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=ruok
    healthcheck:
      test: [ "CMD-SHELL", 'echo "ruok" | nc -w 2 localhost 2181 | grep imok' ]
      start_period: 15s
      interval: 10s
      timeout: 3s
      retries: 12

  kafka:
    image: hub.docker.dw/confluentinc/cp-kafka:7.9.1
    ports:
      - "9092:9092"
      - "19092:19092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=ruok
    healthcheck:
      test: [ "CMD-SHELL", 'kafka-broker-api-versions --bootstrap-server kafka:19092' ]
      start_period: 15s
      interval: 10s
      timeout: 3s
      retries: 20

  kafka-init:
    image: hub.docker.dw/confluentinc/cp-kafka:7.9.1
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # Blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:19092 --list

      declare -a pids=()

      create_topic() {
        kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic $$1 --replication-factor 1 --partitions 3 &
        pids+=($$!)
      }

      wait_for_topics() {
        for pid in $${pids[*]}; do
          wait $$pid
        done
      }

      create_topic frontends.messages.v1
      create_topic frontends.messages.v1.robot.dlq

      create_topic frontends.reactions.v1

      create_topic neural_networks.captions.v1

      create_topic neural_networks.text_generations.v1
      create_topic neural_networks.text_generations.v1.robot.dlq
      
      wait_for_topics 1
      "

  kafka-ui:
    image: hub.docker.dw/tchiotludo/akhq:0.25.1
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8100:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:19092"
