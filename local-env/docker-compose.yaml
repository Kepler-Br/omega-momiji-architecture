version: '3.9'
name: omeag-momiji

services:
  postgres:
    build:
      context: ./postgres-db
    ports:
      - "5429:5432"
    expose:
      - 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  liquibase:
    image: liquibase/liquibase:4.19
    volumes:
      - "./changelog:/liquibase/changelog"
    command: >
      --url="jdbc:postgresql://postgres:5432/omega"
      --changeLogFile=/changelog/changelog-master.yaml
      --username=nonroot
      --password=nonroot
      update
    depends_on:
      postgres:
        condition: service_healthy

  # Upload with us-east-1 region or it will throw an exception
  s3:
    image: hub.docker.dw/bitnami/minio:latest
    ports:
      - "8000:9000"
      - "8001:9001"
    expose:
      - 9000
    environment:
      - MINIO_ROOT_USER=accessKey1
      - MINIO_ROOT_PASSWORD=verySecretKey1
      - MINIO_DEFAULT_BUCKETS=audio,video,image

  zookeeper:
    image: hub.docker.dw/confluentinc/cp-zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # TODO: hardcode versions
  kafka:
    image: hub.docker.dw/confluentinc/cp-kafka
    ports:
      - "9092:9092"
      - "19092:19092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  kafka-init:
    image: hub.docker.dw/confluentinc/cp-kafka
    depends_on:
      - kafka
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # Blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      declare -a pids=()
      
      create_topic() {
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic $$1 --replication-factor 1 --partitions 3 &
        pids+=($$!)
      }
      
      wait_for_topics() {
        for pid in $${pids[*]}; do
          wait $$pid
        done
      }
      
      create_topic TEST
      
      wait_for_topics 1
      "

  kafka-ui:
    image: hub.docker.dw/tchiotludo/akhq
    ports:
      - "8100:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:29092"

#      KAFKA_JMX_PORT: 9999
#      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
#      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#  aws-cli:
#    image: amazon/aws-cli:latest
#    command: |
#      "
#      aws configure set aws_access_key_id accessKey1
#      aws configure set aws_secret_access_key verySecretKey1
#      aws configure set default.region us-east-1
#
#      aws s3api create-bucket --bucket test-bucket-989282 --endpoint-url http://s3:9000
#      "
